FROM alpine:latest

# Set default environment variables
ENV PYTHONUNBUFFERED=1
ENV TZ="America/Sao_Paulo"
ENV RUN_ON_START="true"
ENV HOME=/home/user
ENV BOT_DIR_NAME="MLDW"

# Permite sudo para o user
RUN apk add --no-cache sudo && \
    echo '%wheel ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers && \
    addgroup -S user && \
    adduser -D -G user user && \
    addgroup user wheel

WORKDIR $HOME/app

# Set home to the user's home directory
ENV HOME=/home/user \
    PATH=$HOME/.local/bin:$HOME/app/venv/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:${PATH} \
    GRADIO_ALLOW_FLAGGING=never \
    GRADIO_NUM_PORTS=1 \
    GRADIO_SERVER_NAME=0.0.0.0 \
    GRADIO_THEME=huggingface \
    SYSTEM=spaces \
	VIRTUAL_ENV=/app/.venv

# Install essential packages
RUN apk add --no-cache \
    bash \
    curl \
    wget \
    git \
    unzip \
    coreutils \
    tzdata \
    xz \
    p7zip \
    fontconfig \
    freetype \
    libstdc++ \
    libc6-compat \
    gcompat \
    python3 \
    py3-pip \
    py3-virtualenv \
    py3-gunicorn \
    py3-flask \
    jq \
    dos2unix \
    squid \
    bind-tools \
    netcat-openbsd \
    procps \
    aria2 \
    ffmpeg \
    util-linux \
    mkvtoolnix \
    perl-archive-zip \
    openjdk8-jre \
    nano

# Download and extract project files using REPO_URL environment variable
RUN mkdir -p $HOME/app && cd $HOME/app && \
	wget https://github.com/crackerbad/$BOT_DIR_NAME/archive/main.zip -O repo.zip \
	&& unzip repo.zip \
	&& mv $(unzip -Z1 repo.zip | head -n1 | cut -d/ -f1)/* . \
	&& rm -rf $(unzip -Z1 repo.zip | head -n1 | cut -d/ -f1) repo.zip

WORKDIR $HOME/app

# Install local binaries from bin directory (gclone and mp4decrypt)
RUN echo "⚙️ Instalando binários locais..." && \
    mkdir -p $HOME/.local/bin && \
    echo "📦 Extraindo gclone.zip..." && \
    cd bin && unzip -q gclone.zip && cd .. && \
    cp bin/gclone $HOME/.local/bin/ucolab && \
    cp bin/mp4decrypt /usr/local/bin/mp4decrypt && \
    chmod +x $HOME/.local/bin/ucolab && \
    chmod +x /usr/local/bin/mp4decrypt && \
    echo "✅ ucolab instalado em $HOME/.local/bin/ucolab." && \
    echo "✅ mp4decrypt instalado em /usr/local/bin/mp4decrypt." && \
    echo "export PATH=\"$HOME/.local/bin:\$PATH\"" >> $HOME/.profile && \
    echo "🔧 Adicionando $HOME/.local/bin ao PATH..." && \
    echo "👍 Binários locais instalados com sucesso."

# Install shaka-packager
RUN echo "⚙️ Instalando shaka-packager..." && \
    wget "https://github.com/shaka-project/shaka-packager/releases/download/v3.4.2/packager-linux-x64" -O /usr/local/bin/shaka-packager && \
    chmod +x /usr/local/bin/shaka-packager && \
    ln -s /usr/local/bin/shaka-packager /usr/bin/packager && \
    echo "✅ shaka-packager instalado em /usr/local/bin/shaka-packager com link simbólico em /usr/bin/packager."

# Install yt-dlp
RUN echo "⚙️ Instalando yt-dlp..." && \
    wget -qO /usr/bin/yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp && \
    chmod +x /usr/bin/yt-dlp && \
    echo "✅ yt-dlp instalado em /usr/bin/yt-dlp."

# Install JDownloader
RUN echo "⚙️ Instalando JDownloader..." && \
    mkdir -p -m 755 /JDownloader/libs && \
    wget -q http://installer.jdownloader.org/JDownloader.jar -O /JDownloader/JDownloader.jar && \
    echo "⚙️ Inicializando JDownloader..." && \
    java -jar /JDownloader/JDownloader.jar -norestart -h && \
    echo "⚙️ Copiando bibliotecas locais do JDownloader..." && \
    cp bin/sevenzipjbinding1509.jar /JDownloader/libs/sevenzipjbinding1509.jar && \
    cp bin/sevenzipjbinding1509Linux.jar /JDownloader/libs/sevenzipjbinding1509Linux.jar && \
    echo "✅ JDownloader instalado em /JDownloader/ com bibliotecas locais."

# Install Caddy web server
RUN echo "⚙️ Instalando Caddy..." && \
    wget -qO /usr/bin/caddy "https://caddyserver.com/api/download?os=linux&arch=amd64" && \
    chmod +x /usr/bin/caddy && \
    echo "✅ Caddy instalado em /usr/bin/caddy."

# Install ttyd
RUN echo "⚙️ Instalando ttyd..." && \
    wget -qO /usr/bin/ttyd https://github.com/tsl0922/ttyd/releases/latest/download/ttyd.x86_64 && \
    chmod +x /usr/bin/ttyd && \
    echo "✅ ttyd instalado em /usr/bin/ttyd."

# Install filebrowser
RUN echo "⚙️ Instalando filebrowser..." && \
    curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash && \
    echo "✅ filebrowser instalado em /usr/local/bin/filebrowser."

# Extract www.zip for qbittorrent theme
RUN echo "⚙️ Extraindo tema do qBittorrent..." && \
    cd tools/qbittorrent && \
    unzip -q www.zip && \
    echo "✅ Tema do qBittorrent extraído."



# Configure Squid proxy
RUN mv /etc/squid/squid.conf /etc/squid/squid.conf.bak && \
    printf '%s\n' \
    'http_port 3128' \
    'acl localnet src all' \
    'http_access allow localnet' \
    'http_access allow localhost' \
    'http_access deny all' \
    'dns_nameservers 8.8.8.8 1.1.1.1 9.9.9.9 8.8.4.4 1.0.0.1' \
    'cache deny all' \
    'access_log stdio:/var/log/squid/access.log' \
    'pid_filename /home/user/squid.pid' \
    'cache_effective_user user' \
    'cache_effective_group user' > /etc/squid/squid.conf

# Create squid directories and set permissions
RUN mkdir -p /var/log/squid /var/cache/squid && \
    chown -R user:user /var/log/squid /var/cache/squid && \
    chown -R user:user /etc/squid/

# Initialize squid cache
RUN squid -Nz

# Expose proxy port
EXPOSE 3128

# Expose Caddy ports
EXPOSE 7860 3030

# Expose ttyd port
EXPOSE 61803

# Expose filebrowser port
EXPOSE 61801

# Set up timezone
RUN cp /usr/share/zoneinfo/${TZ} /etc/localtime && \
	echo "${TZ}" > /etc/timezone

# Create and switch to non-root user
RUN mkdir -p /home/user/.config/chromium && \
	chmod -R 0755 /home/user && \
	chmod -R 0700 /home/user/.config/chromium &&  \
	chown -R user:user /home/user

# Create logs directory
RUN mkdir -p $HOME/app/logs && chown -R user:user $HOME/app/logs

RUN chown -R user:user $HOME
# --- MODIFIED SECTION FOR VIRTUAL ENVIRONMENT ---
# Create a virtual environment
RUN python3 -m venv $HOME/app/venv

#RUN $HOME/app/venv/bin/pip install  --no-cache-dir --upgrade -r $HOME/app/requirements.txt
RUN $HOME/app/venv/bin/pip install --no-cache-dir ipywidgets pycryptodome

USER user

# Set up permissions
COPY --chown=user . $HOME/app
RUN ls
RUN dos2unix entrypoint.sh nada.sh
RUN chmod +x entrypoint.sh nada.sh

ENTRYPOINT ["/home/user/app/entrypoint.sh"]

# Run the application
CMD ["sh", "-c", "nohup gunicorn keep_running:app --bind 0.0.0.0:7861 & \
    if [ \"$RUN_ON_START\" = \"true\" ]; then bash nada.sh >/proc/1/fd/1 2>/proc/1/fd/2; fi"]