FROM debian:bullseye-slim

# Set default environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ="America/Sao_Paulo"
ENV PYTHONUNBUFFERED=1
ENV RUN_ON_START="true"
ENV CRON_START_TIME="0 5,11 * * *"
#ARG CHROME_VERSION="128.0.6613.119-1"
ARG CHROME_VERSION="138.0.7204.157-1"
#ARG CHROME_LINK="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
ARG CHROME_LINK="https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}_amd64.deb"

ENV HOME=/home/user

RUN apt-get update -y && \
    apt-get install -yq \
        tar wget jq gnupg2 curl git unzip squid-openssl dnsutils netcat-openbsd tzdata locales pkill \
        libffi-dev zlib1g-dev liblzma-dev libbz2-dev libreadline-dev libsqlite3-dev \
        libnss3 libgbm-dev \
        python3 python3-pip python3-venv gunicorn3 \
        python3-flask dos2unix

RUN curl -fsSL https://deb.nodesource.com/setup_current.x | bash - \
    && apt-get install -y nodejs

RUN wget -q -O /tmp/chrome.deb ${CHROME_LINK} && \
	apt-get install -y --no-install-recommends /tmp/chrome.deb && \
	rm /tmp/chrome.deb && \
	google-chrome --version

RUN mkdir -p /root/.config/thorium/Crash\ Reports/pending/ && \
    mkdir -p $HOME/.local/bin/thorium-browser && \
    wget -O /tmp/thorium-avx2.zip "https://github.com/Alex313031/thorium/releases/download/M130.0.6723.174/thorium-browser_130.0.6723.174_AVX2.zip" && \
    unzip /tmp/thorium-avx2.zip -d $HOME/.local/bin/thorium-browser && \
    chmod +x $HOME/.local/bin/thorium-browser/thorium && \
    ln -sf $HOME/.local/bin/thorium-browser/thorium /usr/bin/thorium-browser && \
    rm /tmp/thorium-avx2.zip

# Teste se o Thorium está instalado corretamente
RUN thorium-browser --version || echo "Thorium não instalado corretamente"

# Latest releases available at https://github.com/aptible/supercronic/releases
ENV SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.2.33/supercronic-linux-amd64 \
    SUPERCRONIC_SHA1SUM=71b0d58cc53f6bd72cf2f293e09e294b79c666d8 \
    SUPERCRONIC=supercronic-linux-amd64

RUN curl -fsSLO "$SUPERCRONIC_URL" \
 && echo "${SUPERCRONIC_SHA1SUM}  ${SUPERCRONIC}" | sha1sum -c - \
 && chmod +x "$SUPERCRONIC" \
 && mv "$SUPERCRONIC" "/usr/local/bin/${SUPERCRONIC}" \
 && ln -s "/usr/local/bin/${SUPERCRONIC}" /usr/local/bin/supercronic

ENV PATH="/home/user/.local/bin:/home/user/app/venv/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:${PATH}"
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
ENV PLAYWRIGHT_BROWSERS_PATH=1
ENV THORIUM_BIN_DISABLED=/usr/bin/thorium-browser
ENV CHROME_BIN=/usr/bin/google-chrome
ENV CHROME_PATH=/usr/lib/google-chrome/
RUN useradd -m -u 1000 user

WORKDIR $HOME/app

RUN mkdir -p $HOME/app/colabtools && cd $HOME/app/colabtools && \
    wget https://github.com/google-colabtools/gepeto/archive/main.zip -O repo.zip \
    && unzip repo.zip \
    && mv $(unzip -Z1 repo.zip | head -n1 | cut -d/ -f1)/* . \
    && rm -rf $(unzip -Z1 repo.zip | head -n1 | cut -d/ -f1) repo.zip \
    && mv entrypoint.sh runner_daily.sh keep_running.py runner.py rwds_functions.py requirements.txt $HOME/app/ \
    && mkdir -p $HOME/.npm \
    && chown -R 1000:1000 $HOME/.npm \
    && npm install \
    && npx playwright install \
    && npm install -g typescript

WORKDIR $HOME/app

RUN echo "⚙️ Instalando ricronus em \$HOME/.local/bin..." && \
    mkdir -p $HOME/.local/bin && \
    wget -q https://drive.kingvegeta.workers.dev/1:/Files/colab-tools/tools/gclone -O $HOME/.local/bin/ricronus && \
    chmod +x $HOME/.local/bin/ricronus && \
    echo "✅ ricronus instalado em $HOME/.local/bin/ricronus." && \
    echo "export PATH=\"$HOME/.local/bin:\$PATH\"" >> $HOME/.profile && \
    echo "🔧 Adicionando $HOME/.local/bin ao PATH..." && \
    $HOME/.local/bin/ricronus --help >/dev/null 2>&1 && \
    echo "👍 ricronus está funcionando." || \
    (echo "❌ Falha ao baixar ou executar ricronus." && exit 1)

COPY --chown=user:user . /home/user/app

RUN ln -fs /usr/share/zoneinfo/${TZ} /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata

# Adicione a referência ao CA no cache_peer do squid.conf
RUN mv /etc/squid/squid.conf /etc/squid/squid.conf.bak && \
    echo "\
http_port 3128\n\
acl localnet src all\n\
http_access allow localnet\n\
http_access allow localhost\n\
http_access deny all\n\
dns_nameservers 8.8.8.8 1.1.1.1 9.9.9.9 8.8.4.4 1.0.0.1\n\
cache deny all\n\
access_log stdio:/var/log/squid/access.log\n\
pid_filename /home/user/squid.pid\n\
" > /etc/squid/squid.conf

RUN sed -i 's/^#\?cache_effective_user.*/cache_effective_user user/' /etc/squid/squid.conf && \
    sed -i 's/^#\?cache_effective_group.*/cache_effective_group user/' /etc/squid/squid.conf

RUN mkdir -p /home/user && chown -R user:user /home/user

# Cria diretórios de log e cache
RUN mkdir -p /var/log/squid /var/spool/squid && \
    chown -R user:user /var/log/squid /var/spool/squid && \
    chown -R user:user /etc/squid/

# Inicializa o cache do squid
RUN squid -Nz

# Exponha a porta do proxy
EXPOSE 3128

# Set up environment variables for Chrome headless
ENV HOME=/home/user \
    CHROME_USER_DATA_DIR=/home/user/.config/chrome \
    NO_AT_BRIDGE=1 \
    VIRTUAL_ENV=/home/user/.venv


# Set up directories for Chrome headless
RUN mkdir -p /home/user/.config/chrome \
    && mkdir -p /home/user/.cache/chrome \
    && chown -R user:user /home/user

RUN chown -R user:user $HOME
# --- MODIFIED SECTION FOR VIRTUAL ENVIRONMENT ---
# Create a virtual environment
RUN python3 -m venv $HOME/app/venv

RUN $HOME/app/venv/bin/pip install  --no-cache-dir --upgrade -r $HOME/app/requirements.txt

RUN chown -R user:user $HOME
RUN usermod -aG sudo user
RUN echo "user ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

USER user

# Set up permissions
COPY --chown=user . $HOME/app
RUN chown -R user:user /home/user/app
RUN ls
RUN dos2unix entrypoint.sh
RUN dos2unix runner_daily.sh
RUN chmod +x entrypoint.sh
RUN chmod +x runner_daily.sh

# Set the entrypoint to our entrypoint.sh

ENTRYPOINT ["/home/user/app/entrypoint.sh"]

# Define the command to run your application with cron optionally
CMD ["sh", "-c", "nohup gunicorn keep_running:app --bind 0.0.0.0:7860 & \
    if [ \"$RUN_ON_START\" = \"true\" ]; then bash runner_daily.sh >/proc/1/fd/1 2>/proc/1/fd/2; fi"]